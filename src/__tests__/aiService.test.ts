import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { initializeAI, generateExpenseInsights } from '../services/aiService'; 


vi.mock('openai', () => {
  // Mock the specific methods we use (chat.completions.create)
  const mockCompletionCreate = vi.fn();
  // Mock the class constructor
  const MockOpenAI = vi.fn(() => ({
    chat: {
      completions: {
        create: mockCompletionCreate,
      },
    },
  }));

  return {
    default: MockOpenAI,
    mockCompletionCreate, // Export the mock function itself for inspection
  };
});

// --- Test Data ---
const sampleData = {
  expenses: [
    { amount: 150, category: 'Dining Out', date: '2025-04-28', description: 'Dinner with friends' },
    { amount: 80, category: 'Groceries', date: '2025-04-25', description: 'Weekly groceries' },
    { amount: 50, category: 'Transport', date: '2025-04-22', description: 'Gas fill-up' },
    { amount: 200, category: 'Shopping', date: '2025-04-20', description: 'New clothes' },
    { amount: 120, category: 'Dining Out', date: '2025-04-15', description: 'Lunch meeting' },
    // Add more if needed for specific tests
  ],
  totalExpenses: 600,
  averageExpense: 120,
  topCategories: [
    { name: 'Dining Out', amount: 270 },
    { name: 'Shopping', amount: 200 },
    { name: 'Groceries', amount: 80 },
  ],
  monthlyTrend: [
    { month: 'March 2025', amount: 550 },
    { month: 'April 2025', amount: 600 },
  ],
};

// --- Test Suite ---
describe('aiService', () => {
  let mockCreateFn: ReturnType<typeof vi.fn>; // To hold the mock function instance

  beforeEach(async () => {
    // Dynamically import the mocked module to access the exported mock function
    const { mockCompletionCreate } = await import('openai');
    mockCreateFn = mockCompletionCreate;
    // Reset mocks before each test
    mockCreateFn.mockClear();
    initializeAI('test-api-key'); // Initialize with a dummy key for tests
  });

   afterEach(() => {
    vi.clearAllMocks();
   });


  it('should call OpenAI chat completions create with correct parameters', async () => {
    const expectedResponse = 'Mocked AI Response';
    mockCreateFn.mockResolvedValueOnce({
      choices: [{ message: { content: expectedResponse, role: 'assistant' } }],
    });

    await generateExpenseInsights(sampleData);

    // Check if the create function was called
    expect(mockCreateFn).toHaveBeenCalledTimes(1);

    // Check the arguments passed to the create function
    const callArgs = mockCreateFn.mock.calls[0][0];
    expect(callArgs.model).toBe('gpt-4o-mini');
    expect(callArgs.temperature).toBe(0.7);
    expect(callArgs.max_tokens).toBe(500);
    expect(callArgs.messages).toHaveLength(2);
    expect(callArgs.messages[0].role).toBe('system');
    expect(callArgs.messages[1].role).toBe('user');
  });

   it('should construct the prompt correctly based on input data', async () => {
    mockCreateFn.mockResolvedValueOnce({ choices: [{ message: { content: 'Mock response' } }] });

    await generateExpenseInsights(sampleData);

    expect(mockCreateFn).toHaveBeenCalledTimes(1);
    const callArgs = mockCreateFn.mock.calls[0][0];
    const promptContent = callArgs.messages[1].content;

    // Verify key pieces of data are included in the prompt
    expect(promptContent).toContain(`Total Expenses: $${sampleData.totalExpenses}`); 
    expect(promptContent).toContain(`Average Expense: $${sampleData.averageExpense}`); 
    // Check top category formatting
    expect(promptContent).toContain(`- Dining Out: $270`);
    expect(promptContent).toContain(`- Shopping: $200`);
    // Check monthly trend formatting
    expect(promptContent).toContain(`- March 2025: $550`);
    expect(promptContent).toContain(`- April 2025: $600`);
     // Check recent expense formatting (first one)
    expect(promptContent).toContain(`- $150 on Dinner with friends (Dining Out)`);
    // Check the overall structure/instructions
    expect(promptContent).toContain('As a financial advisor, analyze this expense data');
    expect(promptContent).toContain('Provide 3-5 specific, actionable recommendations');
   });

  it('should return the content from the AI response', async () => {
    const expectedResponse = 'This is the specific insight generated by the AI.';
    mockCreateFn.mockResolvedValueOnce({
      choices: [{ message: { content: expectedResponse, role: 'assistant' } }],
    });

    const result = await generateExpenseInsights(sampleData);

    expect(result).toBe(expectedResponse);
  });
});